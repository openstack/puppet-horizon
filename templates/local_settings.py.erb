from django.utils.translation import gettext_lazy as _

from horizon.utils import secret_key

from openstack_dashboard.settings import HORIZON_CONFIG

DEBUG = <%= @django_debug.to_s.capitalize %>

<% if @site_branding -%>
SITE_BRANDING = '<%= @site_branding %>'

<% end -%>
WEBROOT = '<%= @root_url %>'

# Required for Django 1.5.
# If horizon is running in production (DEBUG is False), set this
# with the list of host/domain names that the application can serve.
# For more information see:
# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts
#ALLOWED_HOSTS = ['horizon.example.com', ]
<% if @allowed_hosts.kind_of?(Array) -%>
ALLOWED_HOSTS = ['<%= @allowed_hosts.join("', '") %>', ]
<% else -%>
ALLOWED_HOSTS = ['<%= @allowed_hosts %>', ]
<% end -%>

# Set SSL proxy settings:
# Pass this header from the proxy after terminating the SSL,
# and don't forget to strip it from the client's request.
# For more information see:
# https://docs.djangoproject.com/en/1.8/ref/settings/#secure-proxy-ssl-header
<% if @enable_secure_proxy_ssl_header -%>
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
<% else -%>
#SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
<% end -%>

# This setting specifies the name of the header with remote IP address
#SECURE_PROXY_ADDR_HEADER = False
<% if @secure_proxy_addr_header -%>
SECURE_PROXY_ADDR_HEADER = '<%= @secure_proxy_addr_header %>'
<% end -%>

# If Horizon is being served through SSL, then uncomment the following two
# settings to better secure the cookies from security exploits
<% if @secure_cookies -%>
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
<% else -%>
#CSRF_COOKIE_SECURE = True
#SESSION_COOKIE_SECURE = True
#SESSION_COOKIE_HTTPONLY = True
<% end -%>

# Overrides for OpenStack API versions. Use this setting to force the
# OpenStack dashboard to use a specific API version for a given service API.
# Versions specified here should be integers or floats, not strings.
# NOTE: The version should be formatted as it appears in the URL for the
# service API. For example, The identity service APIs have inconsistent
# use of the decimal point, so valid options would be 2.0 or 3.
# Minimum compute version to get the instance locked status is 2.9.
#OPENSTACK_API_VERSIONS = {
#    "identity": 3,
#    "image": 2,
#    "volume": 3,
#    "compute": 2,
#}
<% if ! (@api_versions.empty?) -%>
from openstack_dashboard.settings import OPENSTACK_API_VERSIONS
OPENSTACK_API_VERSIONS.update({
<% @api_versions.sort.each do |opt_name,opt_val| -%>
    '<%= opt_name -%>': <%= opt_val -%>,
<% end -%>
})
<% end -%>

# Set this to True if running on multi-domain model. When this is enabled, it
# will require user to enter the Domain name in addition to username for login.
#OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = False
<% if @keystone_multidomain_support -%>
OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True
<% end -%>

<% if @keystone_domain_choices.kind_of?(Array) -%>
OPENSTACK_KEYSTONE_DOMAIN_DROPDOWN = True
OPENSTACK_KEYSTONE_DOMAIN_CHOICES = (
<% @keystone_domain_choices.each do |d| -%>
    ('<%= d['name'] -%>', '<%= d['display'] -%>'),
<% end -%>
)
<% end -%>

# Overrides the default domain used when running on single-domain model
# with Keystone V3. All entities will be created in the default domain.
#OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = 'Default'
<% if @keystone_default_domain -%>
OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = '<%= @keystone_default_domain %>'
<% end -%>

# Set Console type:
# valid options are "AUTO"(default), "VNC", "SPICE", "RDP", "SERIAL" or None
# Set to None explicitly if you want to deactivate the console.
#CONSOLE_TYPE = "AUTO"

# URL for additional help with this site.
#HORIZON_CONFIG["help_url"] = "https://docs.openstack.org/"
<% if @help_url -%>
HORIZON_CONFIG["help_url"] = "<%= @help_url %>"
<% end -%>

<% if @customization_module and ! (@customization_module.empty?) -%>
# The python module containing own modifications
HORIZON_CONFIG["customization_module"] = "<%= @customization_module -%>"

<% end -%>
# If provided, a "Report Bug" link will be displayed in the site header
# which links to the value of this setting (ideally a URL containing
# information on how to report issues).
#HORIZON_CONFIG["bug_url"] = "http://bug-report.example.com"
<% if @bug_url -%>
HORIZON_CONFIG["bug_url"] = "<%= @bug_url %>"
<% end -%>

# Show backdrop element outside the modal, do not close the modal
# after clicking on backdrop.
#HORIZON_CONFIG["modal_backdrop"] = "static"

# Specify a regular expression to validate user passwords.
#HORIZON_CONFIG["password_validator"] = {
#    "regex": '.*',
#    "help_text": _("Your password does not meet the requirements."),
#}
<%if @password_validator -%>
HORIZON_CONFIG["password_validator"] = {
    "regex": '<%= @password_validator %>',
<%- if @password_validator_help -%>
    "help_text": _("<%= @password_validator_help -%>"),
<%- else -%>
    "help_text": _("Your password does not meet the requirements."),
<%- end -%>
}
<% end -%>

# Turn off browser autocompletion for forms including the login form and
# the database creation workflow if so desired.
#HORIZON_CONFIG["password_autocomplete"] = "off"
HORIZON_CONFIG["password_autocomplete"] = "<%= @password_autocomplete %>"

# Setting this to True will disable the reveal button for password fields,
# including on the login form.
#HORIZON_CONFIG["disable_password_reveal"] = False
<% if @disable_password_reveal -%>
HORIZON_CONFIG["disable_password_reveal"] = True
<% end -%>

# Set this to True to display an 'Admin Password' field on the Change Password
# form to verify that it is indeed the admin logged-in who wants to change the
# password
#ENFORCE_PASSWORD_CHECK = False
<% if @enforce_password_check -%>
ENFORCE_PASSWORD_CHECK = True
<% end -%>

# Set custom secret key:
# You can either set it to a specific value or you can let horizon generate a
# default secret key that is unique on this machine, e.i. regardless of the
# amount of Python WSGI workers (if used behind Apache+mod_wsgi): However,
# there may be situations where you would want to set this explicitly, e.g.
# when multiple dashboard instances are distributed on different machines
# (usually behind a load-balancer). Either you have to make sure that a session
# gets all requests routed to the same dashboard instance or you set the same
# SECRET_KEY for all of them.
#SECRET_KEY = secret_key.generate_or_read_from_file(
#    os.path.join(LOCAL_PATH, '.secret_key_store'))
SECRET_KEY = secret_key.generate_or_read_from_file('<%= @secret_key_path %>')

<% if !@memoized_max_size_default.nil? -%>
# MEMOIZED_MAX_SIZE_DEFAULT allows setting a global default to help control
# memory usage when caching. It should at least be 2 x the number of threads
# with a little bit of extra buffer.
#MEMOIZED_MAX_SIZE_DEFAULT = 25
MEMOIZED_MAX_SIZE_DEFAULT = <%= @memoized_max_size_default.to_s %>
<% end -%>
# We recommend you use memcached for development; otherwise after every reload
# of the django development server, you will have to login again. To use
# memcached set CACHES to something like
#CACHES = {
#    'default': {
#        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#        'LOCATION': '127.0.0.1:11211',
#    }
#}
#
#CACHES = {
#    'default': {
#        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
#    }
#}
CACHES = {
    'default': {
    <%- if !@cache_options.empty? -%>
        'OPTIONS': {
        <%- @cache_options.sort.each do |opt_name,opt_val| -%>
            '<%= opt_name -%>': <%= opt_val -%>,
        <%- end -%>
        },
    <%- end -%>
        'BACKEND': '<%= @cache_backend %>',
    <%- if @cache_server_ip and !(@cache_server_ip.empty?) -%>
        <%- if @cache_server_ip_real.kind_of?(Array) -%>
        'LOCATION': [ <% @cache_server_ip_real.each do |ip| -%>'<%= ip -%>:<%= @cache_server_port -%>',<% end -%> ],
        <%- else -%>
        'LOCATION': '<%= @cache_server_ip_real %>:<%= @cache_server_port %>',
        <%- end -%>
    <%- end -%>
    <%- if @cache_server_url -%>
        <%- if @cache_server_url.kind_of?(Array) -%>
        'LOCATION': ['<%= @cache_server_url.join("','") %>'],
        <%- else -%>
        'LOCATION': '<%= @cache_server_url %>',
        <%- end -%>
    <%- end -%>
    <%- if @cache_timeout -%>
        'TIMEOUT': <%= @cache_timeout %>,
    <%- end -%>
    }
}

<% if @cache_tls_enabled -%>
## START TLS context configuration
import ssl

tls_context = ssl.create_default_context(<% if @cache_tls_cafile %>cafile='<%= @cache_tls_cafile %>'<% end %>)
<% if @cache_tls_certfile and @cache_tls_keyfile -%>
tls_context.load_cert_chain('<%= @cache_tls_certfile %>', '<%= @cache_tls_keyfile %>')
<% end -%>
<% if @cache_tls_certfile and not @cache_tls_keyfile -%>
tls_context.load_cert_chain('<%= @cache_tls_certfile %>')
<% end -%>
<% if @cache_allowed_ciphers -%>
<% if @cache_allowed_ciphers.kind_of?(Array) -%>
tls_context.set_ciphers('<%= @cache_tls_allowed_ciphers.join(":") %>')
<% else -%>
tls_context.set_ciphers('<%= @cache_tls_allowed_ciphers %>')
<% end -%>
<% end -%>

CACHES['default'].setdefault('OPTIONS', {})['tls_context'] = tls_context

## END TLS context configuration

<% end -%>
<% if @django_session_engine -%>
SESSION_ENGINE = "<%= @django_session_engine %>"

<% end -%>
# Send email to the console by default
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# Or send them to /dev/null
#EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'

# Configure these for your outgoing email host
#EMAIL_HOST = 'smtp.my-company.com'
#EMAIL_PORT = 25
#EMAIL_HOST_USER = 'djangomail'
#EMAIL_HOST_PASSWORD = 'top-secret!'

# For multiple regions uncomment this configuration, and add (endpoint, title).
#AVAILABLE_REGIONS = [
#    ('http://cluster1.example.com:5000/v3', 'cluster1'),
#    ('http://cluster2.example.com:5000/v3', 'cluster2'),
#]
<% if @available_regions.kind_of?(Array) -%>
AVAILABLE_REGIONS = [
<% @available_regions.each do |r| -%>
    ('<%= r[0] -%>', '<%= r[1] -%>'),
<% end -%>
]
<% end -%>

#OPENSTACK_HOST = "127.0.0.1"
#OPENSTACK_KEYSTONE_URL = "http://%s:5000/v3" % OPENSTACK_HOST
#OPENSTACK_KEYSTONE_DEFAULT_ROLE = "member"
OPENSTACK_KEYSTONE_URL = "<%= @keystone_url %>"
OPENSTACK_KEYSTONE_DEFAULT_ROLE = "<%= @keystone_default_role %>"

# Enables keystone web single-sign-on if set to True.
#WEBSSO_ENABLED = False
<% if @websso_enabled -%>
WEBSSO_ENABLED = True
<% end -%>

# Determines which authentication choice to show as default.
#WEBSSO_INITIAL_CHOICE = "credentials"
<% if @websso_initial_choice -%>
WEBSSO_INITIAL_CHOICE = "<%= @websso_initial_choice %>"
<% end -%>

# The list of authentication mechanisms which include keystone
# federation protocols and identity provider/federation protocol
# mapping keys (WEBSSO_IDP_MAPPING). Current supported protocol
# IDs are 'saml2' and 'oidc'  which represent SAML 2.0, OpenID
# Connect respectively.
# Do not remove the mandatory credentials mechanism.
# Note: The last two tuples are sample mapping keys to a identity provider
# and federation protocol combination (WEBSSO_IDP_MAPPING).
#WEBSSO_CHOICES = (
#    ("credentials", _("Keystone Credentials")),
#    ("oidc", _("OpenID Connect")),
#    ("saml2", _("Security Assertion Markup Language")),
#    ("acme_oidc", "ACME - OpenID Connect"),
#    ("acme_saml2", "ACME - SAML2")
#)
<% if @websso_choices.kind_of?(Array) -%>
WEBSSO_CHOICES = (
<% if not @websso_choices_hide_keystone -%>
    ("credentials", _("Keystone Credentials")),
<% end -%>
<% @websso_choices.each do |r| -%>
    ("<%= r[0] -%>", _("<%= r[1] -%>")),
<% end -%>
)
<% end -%>

# A dictionary of specific identity provider and federation protocol
# combinations. From the selected authentication mechanism, the value
# will be looked up as keys in the dictionary. If a match is found,
# it will redirect the user to a identity provider and federation protocol
# specific WebSSO endpoint in keystone, otherwise it will use the value
# as the protocol_id when redirecting to the WebSSO by protocol endpoint.
# NOTE: The value is expected to be a tuple formatted as: (<idp_id>, <protocol_id>).
#WEBSSO_IDP_MAPPING = {
#    "acme_oidc": ("acme", "oidc"),
#    "acme_saml2": ("acme", "saml2")
#}
<% if @websso_idp_mapping.kind_of?(Hash) -%>
WEBSSO_IDP_MAPPING = {
<% @websso_idp_mapping.each do |key,r| -%>
    "<%= key -%>": ("<%= r[0] -%>", "<%= r[1] -%>"),
<% end -%>
}
<% end -%>

# Enables redirection on login to the identity provider defined on
# WEBSSO_DEFAULT_REDIRECT_PROTOCOL and WEBSSO_DEFAULT_REDIRECT_REGION
#WEBSSO_DEFAULT_REDIRECT = False
<% if @websso_default_redirect -%>
WEBSSO_DEFAULT_REDIRECT = True
<% end -%>

# Specifies the protocol to use for default redirection on login
#WEBSSO_DEFAULT_REDIRECT_PROTOCOL = None
<% if @websso_default_redirect_protocol -%>
WEBSSO_DEFAULT_REDIRECT_PROTOCOL = "<%= @websso_default_redirect_protocol %>"
<% end -%>

# Specifies the region to which the connection will be established on login
#WEBSSO_DEFAULT_REDIRECT_REGION = OPENSTACK_KEYSTONE_URL
<% if @websso_default_redirect_region -%>
WEBSSO_DEFAULT_REDIRECT_REGION = "<%= @websso_default_redirect_region %>"
<% end -%>

# Enables redirection on logout to the method specified on the identity
# provider. Once logout the client will be redirected to the address specified
# in this variable.
#WEBSSO_DEFAULT_REDIRECT_LOGOUT = None
<% if @websso_default_redirect_logout -%>
WEBSSO_DEFAULT_REDIRECT_LOGOUT = "<%= @websso_default_redirect_logout %>"
<% end -%>

<% if @totp_enabled -%>
OPENSTACK_KEYSTONE_MFA_TOTP_ENABLED = True

<% end -%>
# Disable SSL certificate checks (useful for self-signed certificates):
#OPENSTACK_SSL_NO_VERIFY = False
<% if @ssl_no_verify -%>
OPENSTACK_SSL_NO_VERIFY = True
<% end -%>

# The CA certificate to use to verify SSL connections
<% if @openstack_ssl_cacert.nil? -%>
#OPENSTACK_SSL_CACERT = '/path/to/cacert.pem'
<% else -%>
OPENSTACK_SSL_CACERT = '<%= @openstack_ssl_cacert %>'
<% end -%>

# The OPENSTACK_KEYSTONE_BACKEND settings can be used to identify the
# capabilities of the auth backend for Keystone.
# If Keystone has been configured to use LDAP as the auth backend then set
# can_edit_user to False and name to 'ldap'.
#
# TODO(tres): Remove these once Keystone has an API to identify auth backend.
#OPENSTACK_KEYSTONE_BACKEND = {
#    'name': 'native',
#    'can_edit_domain': True,
#    'can_edit_group': True,
#    'can_edit_project': True,
#    'can_edit_role': True,
#    'can_edit_user': True,
#}
<% if ! (@keystone_options.empty?) -%>
from openstack_dashboard.settings import OPENSTACK_KEYSTONE_BACKEND
OPENSTACK_KEYSTONE_BACKEND.update({
<% @keystone_options.sort.each do |opt_name,opt_val| -%>
  <%- if opt_val == true or opt_val == false -%>
    '<%= opt_name -%>': <%= opt_val.to_s.capitalize -%>,
  <%- elsif opt_val == 'None' -%>
    '<%= opt_name -%>': None,
  <%- else -%>
    '<%= opt_name -%>': '<%= opt_val -%>',
  <%-end-%>
<% end -%>
})
<% end -%>

# Setting this to True, will add a new "Retrieve Password" action on instance,
# allowing Admin session password retrieval/decryption.
#OPENSTACK_ENABLE_PASSWORD_RETRIEVE = False
<% if @password_retrieve -%>
OPENSTACK_ENABLE_PASSWORD_RETRIEVE = True
<% end -%>

# This setting controls whether SimpleTenantUsage nova API is used in the usage
# overview. According to feedbacks to the horizon team, the usage of
# SimpleTenantUsage can cause performance issues in the nova API in larger
# deployments. Try to set this to ``False`` for such cases.
#OPENSTACK_USE_SIMPLE_TENANT_USAGE = True
<% if ! @use_simple_tenant_usage -%>
OPENSTACK_USE_SIMPLE_TENANT_USAGE = False
<% end -%>

# The Xen Hypervisor has the ability to set the mount point for volumes
# attached to instances (other Hypervisors currently do not). Setting
# can_set_mount_point to True will add the option to set the mount point
# from the UI.
#OPENSTACK_HYPERVISOR_FEATURES = {
#    'can_set_mount_point': False,
#    'can_set_password': False,
#    'enable_quotas': True,
#    'requires_keypair': False,
#}
<%- if ! (@hypervisor_options.empty?) -%>
from openstack_dashboard.settings import OPENSTACK_HYPERVISOR_FEATURES
OPENSTACK_HYPERVISOR_FEATURES.update({
<%- @hypervisor_options.sort.each do |opt_name,opt_val| -%>
    '<%= opt_name -%>': <%= opt_val.to_s.capitalize -%>,
<%-end-%>
})
<%-end-%>

# The OPENSTACK_CINDER_FEATURES settings can be used to enable optional
# services provided by cinder that is not exposed by its extension API.
#OPENSTACK_CINDER_FEATURES = {
#    'enable_backup': False,
#}
<%- if ! (@cinder_options.empty?) -%>
from openstack_dashboard.settings import OPENSTACK_CINDER_FEATURES
OPENSTACK_CINDER_FEATURES.update({
<%- @cinder_options.sort.each do |opt_name,opt_val| -%>
    '<%= opt_name -%>': <%= opt_val.to_s.capitalize -%>,
<%-end-%>
})
<%-end-%>

# A dictionary of settings which can be used to provide the default values for
# properties found in the Launch Instance modal.
#LAUNCH_INSTANCE_DEFAULTS = {
#    'config_drive': False,
#    'create_volume': True,
#    'hide_create_volume': False,
#    'disable_image': False,
#    'disable_instance_snapshot': False,
#    'disable_volume': False,
#    'disable_volume_snapshot': False,
#    'enable_scheduler_hints': True,
#    'enable_metadata': True,
#    'enable_net_ports': True,
#    'default_availability_zone': 'Any',
#}
<%- if ! (@instance_options.empty?) -%>
from openstack_dashboard.settings import LAUNCH_INSTANCE_DEFAULTS
LAUNCH_INSTANCE_DEFAULTS.update({
<%- @instance_options.sort.each do |opt_name,opt_val| -%>
  <%- if opt_val.kind_of?(String) -%>
    '<%= opt_name -%>': '<%= opt_val -%>',
  <%- else -%>
    '<%= opt_name -%>': <%= opt_val.to_s.capitalize -%>,
  <%-end-%>
<%-end-%>
})
<%-end-%>

# The OPENSTACK_NEUTRON_NETWORK settings can be used to enable optional
# services provided by neutron. Options currently available are load
# balancer service, security groups, quotas, VPN service.
#OPENSTACK_NEUTRON_NETWORK = {
#    'enable_auto_allocated_network': False,
#    'enable_distributed_router': False,
#    'enable_fip_topology_check': True,
#    'enable_ha_router': False,
#    'enable_ipv6': True,
#    'enable_quotas': True,
#    'enable_rbac_policy': True,
#    'enable_router': True,
#
#    # Default dns servers you would like to use when a subnet is
#    # created.  This is only a default, users can still choose a different
#    # list of dns servers when creating a new subnet.
#    # The entries below are examples only, and are not appropriate for
#    # real deployments
#    # 'default_dns_nameservers': ["8.8.8.8", "8.8.4.4", "208.67.222.222"],
#    'default_dns_nameservers': [],
#
#    # Set which provider network types are supported. Only the network types
#    # in this list will be available to choose from when creating a network.
#    # Network types include local, flat, vlan, gre, vxlan and geneve.
#    'supported_provider_types': ['*'],
#
#    # You can configure available segmentation ID range per network type
#    # in your deployment.
#    # 'segmentation_id_range': {
#    #     'vlan': [1024, 2048],
#    #     'vxlan': [4094, 65536],
#    # },
#    'segmentation_id_range': {},
#
#    # You can define additional provider network types here.
#    # 'extra_provider_types': {
#    #     'awesome_type': {
#    #         'display_name': 'Awesome New Type',
#    #         'require_physical_network': False,
#    #         'require_segmentation_id': True,
#    #     }
#    # },
#    'extra_provider_types': {},
#
#    # Set which VNIC types are supported for port binding. Only the VNIC
#    # types in this list will be available to choose from when creating a
#    # port.
#    # VNIC types include 'normal', 'direct', 'direct-physical', 'macvtap',
#    # 'baremetal' and 'virtio-forwarder'
#    # Set to empty list or None to disable VNIC type selection.
#    'supported_vnic_types': ['*'],
#
#    # Set list of available physical networks to be selected in the physical
#    # network field on the admin create network modal. If it's set to an empty
#    # list, the field will be a regular input field.
#    # e.g. ['default', 'test']
#    'physical_networks': [],
#}
<%- if ! (@neutron_options.empty?) -%>
from openstack_dashboard.settings import OPENSTACK_NEUTRON_NETWORK
OPENSTACK_NEUTRON_NETWORK.update({
<%- @neutron_options.sort.each do |opt_name,opt_val| -%>
  <%- if opt_val == true or opt_val == false -%>
    '<%= opt_name -%>': <%= opt_val.to_s.capitalize -%>,
  <%- elsif opt_val == 'None' -%>
    '<%= opt_name -%>': None,
  <%- elsif opt_val.kind_of?(Array) -%>
    '<%= opt_name -%>': ['<%= opt_val.join("', '") %>'],
  <%- else -%>
    '<%= opt_name -%>': '<%= opt_val -%>',
  <%-end-%>
<%-end-%>
})
<%-end-%>

# The OPENSTACK_IMAGE_BACKEND settings can be used to customize features
# in the OpenStack Dashboard related to the Image service, such as the list
# of supported image formats.
#OPENSTACK_IMAGE_BACKEND = {
#    'image_formats': [
#        ('', _('Select format')),
#        ('aki', _('AKI - Amazon Kernel Image')),
#        ('ami', _('AMI - Amazon Machine Image')),
#        ('ari', _('ARI - Amazon Ramdisk Image')),
#        ('docker', _('Docker')),
#        ('iso', _('ISO - Optical Disk Image')),
#        ('ova', _('OVA - Open Virtual Appliance')),
#        ('ploop', _('PLOOP - Virtuozzo/Parallels Loopback Disk')),
#        ('qcow2', _('QCOW2 - QEMU Emulator')),
#        ('raw', _('Raw')),
#        ('vdi', _('VDI - Virtual Disk Image')),
#        ('vhd', ('VHD - Virtual Hard Disk')),
#        ('vhdx', _('VHDX - Large Virtual Hard Disk')),
#        ('vmdk', _('VMDK - Virtual Machine Disk')),
#    ]
#}
<%- if !(@image_backend.empty?) -%>
OPENSTACK_IMAGE_BACKEND = {
  <%- @image_backend.each do |opt_name,opt_val| -%>
    '<%= opt_name %>': [
      <%- opt_val.each do |val,label| -%>
        ('<%= val %>', _('<%= label %>')),
      <%- end -%>
    ], # <%= opt_name %>
  <%- end -%>
} # OPENSTACK_IMAGE_BACKEND
<%- end -%>

# The IMAGE_CUSTOM_PROPERTY_TITLES settings is used to customize the titles for
# image custom property attributes that appear on image detail pages.
#IMAGE_CUSTOM_PROPERTY_TITLES = {
#    "architecture": _("Architecture"),
#    "kernel_id": _("Kernel ID"),
#    "ramdisk_id": _("Ramdisk ID"),
#    "image_state": _("Euca2ools state"),
#    "project_id": _("Project ID"),
#    "image_type": _("Image Type"),
#}

# The IMAGE_RESERVED_CUSTOM_PROPERTIES setting is used to specify which image
# custom properties should not be displayed in the Image Custom Properties
# table.
#IMAGE_RESERVED_CUSTOM_PROPERTIES = []

# A dictionary of default settings for create image modal.
#CREATE_IMAGE_DEFAULTS = {
#    'image_visibility': "public",
#}
<% if @create_image_defaults -%>
from openstack_dashboard.settings import CREATE_IMAGE_DEFAULTS
CREATE_IMAGE_DEFAULTS.update({
<%- @create_image_defaults.sort.each do |opt_name,opt_val| -%>
    '<%= opt_name %>': '<%= opt_val %>',
<%- end -%>
})
<% end -%>

# OPENSTACK_ENDPOINT_TYPE specifies the endpoint type to use for the endpoints
# in the Keystone service catalog. Use this setting when Horizon is running
# external to the OpenStack environment. The default is 'publicURL'.
#OPENSTACK_ENDPOINT_TYPE = "publicURL"
<% if @openstack_endpoint_type -%>
OPENSTACK_ENDPOINT_TYPE = "<%= @openstack_endpoint_type %>"
<% end -%>

# SECONDARY_ENDPOINT_TYPE specifies the fallback endpoint type to use in the
# case that OPENSTACK_ENDPOINT_TYPE is not present in the endpoints
# in the Keystone service catalog. Use this setting when Horizon is running
# external to the OpenStack environment. The default is None.  This
# value should differ from OPENSTACK_ENDPOINT_TYPE if used.
#SECONDARY_ENDPOINT_TYPE = "publicURL"
<% if @secondary_endpoint_type -%>
SECONDARY_ENDPOINT_TYPE = "<%= @secondary_endpoint_type %>"
<% end -%>

# OPENSTACK_KEYSTONE_ENDPOINT_TYPE specifies the endpoint type use from
# service catalog when looking up the Keystone (identity) endpoint. This
# parameter overrides OPENSTACK_ENDPOINT_TYPE.
#OPENSTACK_KEYSTONE_ENDPOINT_TYPE = None
<% if @openstack_keystone_endpoint_type -%>
OPENSTACK_KEYSTONE_ENDPOINT_TYPE = "<%= @openstack_keystone_endpoint_type %>"
<% end -%>

# The number of objects (Swift containers/objects or images) to display
# on a single page before providing a paging element (a "more" link)
# to paginate results.
#API_RESULT_LIMIT = 1000
#API_RESULT_PAGE_SIZE = 20
<% if !(@api_result_limit.nil?) -%>
API_RESULT_LIMIT = <%= @api_result_limit %>
<% end -%>
<% if !(@api_result_page_size.nil?) -%>
API_RESULT_PAGE_SIZE = <%= @api_result_page_size %>
<% end -%>

# The size of chunk in bytes for downloading objects from Swift
#SWIFT_FILE_TRANSFER_CHUNK_SIZE = 512 * 1024

# Specify a maximum number of items to display in a dropdown.
#DROPDOWN_MAX_ITEMS = 30
<% if !(@dropdown_max_items.nil?) -%>
DROPDOWN_MAX_ITEMS = <%= @dropdown_max_items %>
<% end -%>

# The timezone of the server. This should correspond with the timezone
# of your entire OpenStack installation, and hopefully be in UTC.
TIME_ZONE = "<%= @timezone %>"

# If you have external monitoring links, eg:
<% if @horizon_app_links -%>
EXTERNAL_MONITORING = ['<%= @horizon_app_links.join("', '") %>']
<% end -%>

# When launching an instance, the menu of available flavors is
# sorted by RAM usage, ascending. If you would like a different sort order,
# you can provide another flavor attribute as sorting key. Alternatively, you
# can provide a custom callback method to use for sorting. You can also provide
# a flag for reverse sort. For more info, see
# http://docs.python.org/2/library/functions.html#sorted
#CREATE_INSTANCE_FLAVOR_SORT = {
#    'key': 'name',
#     # or
#    'key': my_awesome_callback_method,
#    'reverse': False,
#}

<% if @available_themes.kind_of?(Array) -%>
AVAILABLE_THEMES = [
<% @available_themes.each do |theme| -%>
    ('<%= theme['name'] %>', '<%= theme['label'] %>', '<%= theme['path'] %>'),
<% end -%>
]

<% end -%>
<% if @default_theme -%>
DEFAULT_THEME = '<%= @default_theme %>'

<% end -%>
<% if !(@authentication_plugins.empty?) -%>
AUTHENTICATION_PLUGINS = [
<% @authentication_plugins.each do |r| -%>
    '<%= r -%>',
<% end -%>
]

<% end -%>
# Modules that provide /auth routes that can be used to handle different types
# of user authentication. Add auth plugins that require extra route handling to
# this list.
#AUTHENTICATION_URLS = [
#    'openstack_auth.urls',
#]

# The Horizon Policy Enforcement engine uses these values to load per service
# policy rule files. The content of these files should match the files the
# OpenStack services are using to determine role based access control in the
# target installation.

# Path to directory containing policy.json files
#POLICY_FILES_PATH = os.path.join(ROOT_PATH, "conf")
<% if !(@policy_files_path_real.nil?) -%>
POLICY_FILES_PATH = '<%= @policy_files_path_real %>'
<% end -%>

# Map of local copy of service policy files.
# Please insure that your identity policy file matches the one being used on
# your keystone servers. There is an alternate policy file that may be used
# in the Keystone v3 multi-domain case, policy.v3cloudsample.json.
# This file is not included in the Horizon repository by default but can be
# found at
# https://opendev.org/openstack/keystone/src/branch/master/etc/ \
# policy.v3cloudsample.json
# Having matching policy files on the Horizon and Keystone servers is essential
# for normal operation. This holds true for all services and their policy files.
#POLICY_FILES = {
#    'identity': 'keystone_policy.yaml',
#    'compute': 'nova_policy.yaml',
#    'volume': 'cinder_policy.yaml',
#    'image': 'glance_policy.yaml',
#    'network': 'neutron_policy.yaml',
#}
<% if @policy_files.kind_of?(Hash) -%>
POLICY_FILES = {
<% @policy_files.sort.each do |service_name,filename| -%>
    '<%= service_name -%>': '<%= filename -%>',
<% end -%>
} # POLICY_FILES
<% end -%>

# Services for which horizon has extra policies are defined
# in POLICY_DIRS by default.
#POLICY_DIRS = {
#    'compute': ['nova_policy.d'],
#    'volume': ['cinder_policy.d'],
#}

#DEFAULT_POLICY_FILES = {
#    'identity': 'default_policies/keystone.yaml',
#    'compute': 'default_policies/nova.yaml',
#    'volume': 'default_policies/cinder.yaml',
#    'image': 'default_policies/glance.yaml',
#    'network': 'default_policies/neutron.yaml',
#}

# Change this patch to the appropriate static directory containing
# two files: _variables.scss and _styles.scss
#CUSTOM_THEME_PATH = 'themes/default'

LOGGING = {
    'version': 1,
    # When set to True this will disable all logging except
    # for loggers specified in this configuration dictionary. Note that
    # if nothing is specified here and disable_existing_loggers is True,
    # django.db.backends will still log unless it is disabled explicitly.
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s %(process)d %(levelname)s %(name)s '
                      '%(message)s'
        },
        'normal': {
            'format': 'dashboard-%(name)s: %(levelname)s %(message)s'
        },
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'console': {
            # Set the level to "DEBUG" for verbose output logging.
            'level': '<%= @log_level %>',
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': '<%= @log_level %>',
            'class': 'logging.FileHandler',
            'filename': '<%= scope.lookupvar("horizon::params::logdir") %>/horizon.log',
            'formatter': 'verbose',
        },
    <%- if @log_handlers.include?('syslog') -%>
        'syslog': {
            'level': '<%= @log_level %>',
            'facility': '<%= @syslog_facility %>',
            'class': 'logging.handlers.SysLogHandler',
            'address': '/dev/log',
            'formatter': 'normal',
        }
    <%- end -%>
    },
    'loggers': {
        'horizon': {
            # 'handlers': ['console'],
            'handlers': ['<%= @log_handlers.join("', '") %>'],
            # 'level': 'DEBUG',
            'level': '<%= @log_level %>',
            'propagate': False,
        },
        'openstack_dashboard': {
            # 'handlers': ['console'],
            'handlers': ['<%= @log_handlers.join("', '") %>'],
            # 'level': 'DEBUG',
            'level': '<%= @log_level %>',
            'propagate': False,
        },
        'novaclient': {
            # 'handlers': ['console'],
            'handlers': ['<%= @log_handlers.join("', '") %>'],
            # 'level': 'DEBUG',
            'level': '<%= @log_level %>',
            'propagate': False,
        },
        'cinderclient': {
            # 'handlers': ['console'],
            'handlers': ['<%= @log_handlers.join("', '") %>'],
            # 'level': 'DEBUG',
            'level': '<%= @log_level %>',
            'propagate': False,
        },
        'keystoneauth': {
            # 'handlers': ['console'],
            'handlers': ['<%= @log_handlers.join("', '") %>'],
            # 'level': 'DEBUG',
            'level': '<%= @log_level %>',
            'propagate': False,
        },
        'keystoneclient': {
            # 'handlers': ['console'],
            'handlers': ['<%= @log_handlers.join("', '") %>'],
            # 'level': 'DEBUG',
            'level': '<%= @log_level %>',
            'propagate': False,
        },
        'oslo_policy': {
            # 'handlers': ['console'],
            'handlers': ['<%= @log_handlers.join("', '") %>'],
            # 'level': 'DEBUG',
            'level': '<%= @log_level %>',
            'propagate': False,
        },
        'glanceclient': {
            # 'handlers': ['console'],
            'handlers': ['<%= @log_handlers.join("', '") %>'],
            # 'level': 'DEBUG',
            'level': '<%= @log_level %>',
            'propagate': False,
        },
        'neutronclient': {
            # 'handlers': ['console'],
            'handlers': ['<%= @log_handlers.join("', '") %>'],
            # 'level': 'DEBUG',
            'level': '<%= @log_level %>',
            'propagate': False,
        },
        'swiftclient': {
            # 'handlers': ['console'],
            'handlers': ['<%= @log_handlers.join("', '") %>'],
            # 'level': 'DEBUG',
            'level': '<%= @log_level %>',
            'propagate': False,
        },
        'openstack_auth': {
            # 'handlers': ['console'],
            'handlers': ['<%= @log_handlers.join("', '") %>'],
            # 'level': 'DEBUG',
            'level': '<%= @log_level %>',
            'propagate': False,
        },
        'django': {
            # 'handlers': ['console'],
            'handlers': ['<%= @log_handlers.join("', '") %>'],
            # 'level': 'DEBUG',
            'level': '<%= @django_log_level_real %>',
            'propagate': False,
        },
        # VariableDoesNotExist error in the debug level from django.template
        # is VERY noisy and it is output even for valid cases,
        # so set the default log level of django.template to INFO.
        'django.template': {
            # 'handlers': ['console'],
            'handlers': ['<%= @log_handlers.join("', '") %>'],
            'level': '<%= @django_template_log_level %>',
            'propagate': False,
        },
        # Logging from django.db.backends is VERY verbose, send to null
        # by default.
        'django.db.backends': {
            'handlers': ['null'],
            'propagate': False,
        },
        'requests': {
            'handlers': ['null'],
            'propagate': False,
        },
        'urllib3': {
            'handlers': ['null'],
            'propagate': False,
        },
        'chardet.charsetprober': {
            'handlers': ['null'],
            'propagate': False,
        },
        'iso8601': {
            'handlers': ['null'],
            'propagate': False,
        },
    }
}

# 'direction' should not be specified for all_tcp/udp/icmp.
# It is specified in the form.
SECURITY_GROUP_RULES = {
    'all_tcp': {
        'name': 'ALL TCP',
        'ip_protocol': 'tcp',
        'from_port': '1',
        'to_port': '65535',
    },
    'all_udp': {
        'name': 'ALL UDP',
        'ip_protocol': 'udp',
        'from_port': '1',
        'to_port': '65535',
    },
    'all_icmp': {
        'name': 'ALL ICMP',
        'ip_protocol': 'icmp',
        'from_port': '-1',
        'to_port': '-1',
    },
    'ssh': {
        'name': 'SSH',
        'ip_protocol': 'tcp',
        'from_port': '22',
        'to_port': '22',
    },
    'smtp': {
        'name': 'SMTP',
        'ip_protocol': 'tcp',
        'from_port': '25',
        'to_port': '25',
    },
    'dns': {
        'name': 'DNS',
        'ip_protocol': 'tcp',
        'from_port': '53',
        'to_port': '53',
    },
    'http': {
        'name': 'HTTP',
        'ip_protocol': 'tcp',
        'from_port': '80',
        'to_port': '80',
    },
    'pop3': {
        'name': 'POP3',
        'ip_protocol': 'tcp',
        'from_port': '110',
        'to_port': '110',
    },
    'imap': {
        'name': 'IMAP',
        'ip_protocol': 'tcp',
        'from_port': '143',
        'to_port': '143',
    },
    'ldap': {
        'name': 'LDAP',
        'ip_protocol': 'tcp',
        'from_port': '389',
        'to_port': '389',
    },
    'https': {
        'name': 'HTTPS',
        'ip_protocol': 'tcp',
        'from_port': '443',
        'to_port': '443',
    },
    'smtps': {
        'name': 'SMTPS',
        'ip_protocol': 'tcp',
        'from_port': '465',
        'to_port': '465',
    },
    'imaps': {
        'name': 'IMAPS',
        'ip_protocol': 'tcp',
        'from_port': '993',
        'to_port': '993',
    },
    'pop3s': {
        'name': 'POP3S',
        'ip_protocol': 'tcp',
        'from_port': '995',
        'to_port': '995',
    },
    'ms_sql': {
        'name': 'MS SQL',
        'ip_protocol': 'tcp',
        'from_port': '1433',
        'to_port': '1433',
    },
    'mysql': {
        'name': 'MYSQL',
        'ip_protocol': 'tcp',
        'from_port': '3306',
        'to_port': '3306',
    },
    'rdp': {
        'name': 'RDP',
        'ip_protocol': 'tcp',
        'from_port': '3389',
        'to_port': '3389',
    },
}

SESSION_TIMEOUT = <%= @session_timeout %>
<% if ! @simultaneous_sessions.nil? -%>
# Control whether a same user can have multiple action sessions.
#SIMULTANEOUS_SESSIONS = 'allow'
SIMULTANEOUS_SESSIONS = '<%= @simultaneous_sessions %>'
<% end -%>

TOKEN_TIMEOUT_MARGIN = <%= @token_timeout_margin %>

# This setting controls whether or not compression is enabled. Disabling
# compression makes Horizon considerably slower, but makes it much easier
# to debug JS and CSS changes
COMPRESS_ENABLED = <%= @compress_enabled.to_s.capitalize %>

# The Ubuntu package includes pre-compressed JS and compiled CSS to allow
# offline compression by default.  To enable online compression, install
# the python-lesscpy package and disable the following option.
COMPRESS_OFFLINE = <%= @compress_offline.to_s.capitalize %>

# Controls the absolute file path that linked static will be read from and
# compressed static will be written to
# COMPRESS_ROOT = STATIC_ROOT
<% if ! @compress_root.nil? -%>
COMPRESS_ROOT = '<%= @compress_root %>'
<% end -%>

# For Glance image upload, Horizon uses the file upload support from Django
# so we add this option to change the directory where uploaded files are temporarily
# stored until they are loaded into Glance.
FILE_UPLOAD_TEMP_DIR = '<%= @file_upload_temp_dir %>'

# The default date range in the Overview panel meters - either <today> minus N
# days (if the value is integer N), or from the beginning of the current month
# until today (if set to None). This setting should be used to limit the amount
# of data fetched by default when rendering the Overview panel.
# OVERVIEW_DAYS_RANGE = None
<% if @overview_days_range -%>
OVERVIEW_DAYS_RANGE = <%= @overview_days_range %>
<% end -%>

# Additional settings can be made available to the client side for
# extensibility by specifying them in REST_API_ADDITIONAL_SETTINGS
# !! Please use extreme caution as the settings are transferred via HTTP/S
# and are not encrypted on the browser. This is an experimental API and
# may be deprecated in the future without notice.
#REST_API_ADDITIONAL_SETTINGS = []

# DISALLOW_IFRAME_EMBED can be used to prevent Horizon from being embedded
# within an iframe. Legacy browsers are still vulnerable to a Cross-Frame
# Scripting (XFS) vulnerability, so this option allows extra security hardening
# where iframes are not used in deployment. Default setting is True.
# For more information see:
# http://tinyurl.com/anticlickjack
#DISALLOW_IFRAME_EMBED = True
DISALLOW_IFRAME_EMBED = <%= @disallow_iframe_embed.to_s.capitalize %>

# Set to 'legacy' or 'direct' to allow users to upload images to glance via
# Horizon server. When enabled, a file form field will appear on the create
# image form. If set to 'off', there will be no file form field on the create
# image form. See documentation for deployment considerations.
#HORIZON_IMAGES_UPLOAD_MODE = 'legacy'
<% if @horizon_upload_mode -%>
HORIZON_IMAGES_UPLOAD_MODE = "<%= @horizon_upload_mode %>"
<%- end -%>

# A default instance boot source. Allowed values are: "image", "snapshot",
# "volume" and "volume_snapshot"
#DEFAULT_BOOT_SOURCE = "image"
<% if @default_boot_source -%>
DEFAULT_BOOT_SOURCE = "<%= @default_boot_source %>"
<%- end -%>

# Services may require a System Scope token for certain operations. This
# settings enables the use of the system scope token on per-service basis.
#SYSTEM_SCOPE_SERVICES = []
<% if ! @system_scope_services.nil? -%>
<% if @system_scope_services.kind_of?(Array) -%>
SYSTEM_SCOPE_SERVICES = ['<%= @system_scope_services.join("', '") %>']
<%- else -%>
SYSTEM_SCOPE_SERVICES = ['<%= @system_scope_services %>']
<%- end -%>
<%- end -%>
